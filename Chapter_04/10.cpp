#include "iostream"
using namespace std;

/*
知识点总结和注意点：
1. 共用体（Union）和结构体（Struct）的定义和区别：
   - 共用体：所有成员共享同一段内存，大小取决于最大成员的大小，且只能同时存储一个成员的值。
   - 结构体：每个成员都有自己的内存空间，结构体的大小是所有成员大小之和，考虑对齐。

2. 共用体和结构体的内存占用：
   - 共用体占用的内存为最大成员的大小。
   - 结构体占用的内存为所有成员大小之和，并且需要考虑内存对齐。

3. 共用体的成员访问：
   - 因为共用体成员共享内存，修改一个成员会影响其他成员。
   - 访问共用体成员时需确保访问的成员是最后一个被赋值的成员，否则可能得到未定义值。

注意点：
- 共用体中不同类型的成员共享内存，所以要特别注意在不同成员间切换时的操作，避免数据错误。
- 结构体成员按声明顺序排列，并进行内存对齐，以确保高效访问。
- 使用`sizeof`可以获取变量或类型所占用的内存大小。
*/

union one2all
{
    char ch;  // 共用体成员：字符
    int n;    // 共用体成员：整数
};

struct two2all
{
    char ch;  // 结构体成员：字符
    int n;    // 结构体成员：整数
};

int main()
{
    // 定义共用体变量test1
    one2all test1;
    cout << "共用体占用空间：" << sizeof test1 << endl;  // 输出共用体占用的内存大小

    // 定义结构体变量test2
    two2all test2;
    cout << "结构体占用空间：" << sizeof test2 << endl;  // 输出结构体占用的内存大小

    // 设置共用体成员ch的值
    test1.ch = 'a';
    cout << test1.ch << endl;  // 输出共用体成员ch的值

    // 设置共用体成员n的值
    test1.n = 90;
    cout << test1.n << endl;  // 输出共用体成员n的值
    cout << test1.ch << endl;  // 输出共用体成员ch的值，注意此时ch的值可能已被n覆盖

    return 0; // 返回0表示程序正常结束
}
