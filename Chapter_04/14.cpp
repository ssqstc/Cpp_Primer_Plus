#include "iostream"
using namespace std;

/*
知识点总结和注意点：
1. 动态数组分配：
   - 使用 `new` 运算符可以在运行时动态分配数组内存。
   - 访问数组元素可以使用指针算术或下标运算符。
   - 使用 `delete[]` 运算符释放动态分配的数组内存，防止内存泄漏。

2. 指针和数组的关系：
   - 指针可以指向数组的首地址，通过指针可以遍历数组元素。
   - 指针算术运算会改变指针指向的内存地址。

注意点：
- 动态分配数组后一定要使用 `delete[]` 释放内存。
- 在使用 `delete[]` 释放内存之前，确保指针指向的是数组的首地址。
- 避免修改指针使其不再指向数组首地址后进行 `delete[]` 操作，这会导致未定义行为。
*/

int main()
{
    double *p3 = new double[3];  // 动态分配一个包含3个double类型元素的数组
    *p3 = 0.2;  // 将数组的第一个元素设为0.2
    p3[1] = 0.5;  // 将数组的第二个元素设为0.5
    p3[2] = 0.8;  // 将数组的第三个元素设为0.8

    // 输出数组的三个元素
    cout << p3[0] << "\t" << p3[1] << "\t" << p3[2] << "\t" << endl;

    // 注释掉指针算术运算以避免指针偏移，导致未定义行为
    // ++p3;  // 这行会使指针偏移，指向数组的第二个元素，释放内存时会出错

    // 正常情况下输出数组的三个元素
    cout << p3[0] << "\t" << p3[1] << "\t" << p3[2] << "\t" << endl;

    // --p3;  // 这行会将指针恢复到原来的位置，若前面有偏移指针的操作才需要

    delete[] p3;  // 释放动态分配的数组内存

    return 0;  // 返回0表示程序正常结束
}
