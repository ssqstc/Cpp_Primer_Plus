#include "iostream"
using namespace std;
#include "vector"  // 包含vector头文件，用于动态数组
#include "array"   // 包含array头文件，用于固定大小的数组

/*
知识点总结和注意点：
1. 不同类型数组的定义和使用：
   - 原生数组：固定大小，声明时指定长度，可以直接访问元素地址。
   - vector：动态数组，大小可变，提供更多的成员函数和功能。
   - std::array：C++11引入的固定大小数组，封装了原生数组，提供更安全和便捷的操作。

2. 数组元素的访问和地址获取：
   - 可以使用下标运算符[]访问数组元素。
   - 可以通过&运算符获取数组元素的地址。

3. 数组越界访问的风险：
   - 访问原生数组的越界元素不会导致编译错误，但会导致未定义行为。
   - vector和std::array提供了更安全的访问方式，防止越界访问。

注意点：
- 使用数组时，务必注意数组下标范围，避免越界访问。
- std::array的大小在编译时确定，而vector的大小可以在运行时动态变化。
- std::array和vector提供了更安全和便捷的数组操作，优先使用它们代替原生数组。
*/

int main()
{
    // 原生数组，大小为4
    double a1[4] = {1.2, 2.4, 3.6, 4.8};

    // vector动态数组，大小为4
    vector<double> a2(4);
    a2[0] = 1.0 / 3.0;
    a2[1] = 1.0 / 5.0;
    a2[2] = 1.0 / 7.0;
    a2[3] = 1.0 / 9.0;

    // std::array固定大小数组，大小为4
    array<double, 4> a3 = {3.14, 2.72, 1.62, 1.41};
    array<double, 4> a4;
    a4 = a3;  // 可以直接赋值

    // 输出数组元素及其地址
    cout << "a1[2] = " << a1[2] << " at " << &a1[2] << endl; // 数据存储在栈
    cout << "a2[2] = " << a2[2] << " at " << &a2[2] << endl; // 数据存储在堆
    cout << "a3[2] = " << a3[2] << " at " << &a3[2] << endl; // 数据存储在栈
    cout << "a4[2] = " << a4[2] << " at " << &a4[2] << endl; // 数据存储在栈

    // 演示数组越界访问（注意：此操作危险，实际编程中应避免）
    a1[-2] = 20.2;
    cout << "a1[-2] = " << a1[-2] << " at " << &a1[-2] << endl;  // 访问越界元素，可能导致未定义行为
    cout << "a3[2] = " << a3[2] << " at " << &a3[2] << endl;  // 这里的值可能会受到前面越界操作的影响
    cout << "a4[2] = " << a4[2] << " at " << &a4[2] << endl;  // 这里的值可能会受到前面越界操作的影响

    return 0;  // 返回0表示程序正常结束
}
