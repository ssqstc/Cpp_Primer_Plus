#include "04_head_Chapter14.h"

/*
 * 知识点总结：
 * 1. 多态性：`Worker` 类的派生类 `Waiter` 和 `Singer` 通过重写基类中的虚函数实现了多态。多态允许通过基类指针或引用调用派生类的重写函数。
 * 2. 构造函数初始化：`Waiter` 和 `Singer` 类的构造函数通过调用基类 `Worker` 的构造函数来初始化继承的成员变量。
 * 3. 枚举类型：`Singer` 类使用枚举类型来定义歌手的声部，并通过静态常量字符数组来表示每个声部的名称。
 * 4. 静态成员：`Singer` 类中的静态成员 `pv` 用于所有对象共享，并且只在类内定义一次。
 * 5. 虚函数：`set()` 和 `show()` 被声明为虚函数，以便在运行时根据对象的实际类型调用正确的函数实现。

 * 注意点：
 * 1. 输入处理：使用 `cin` 和 `getline` 函数时，需要注意清理输入缓冲区，以防止输入错误。
 * 2. 构造函数初始化列表：使用构造函数初始化列表时，确保基类的成员先于派生类的成员初始化。
 * 3. 虚函数：虚函数在派生类中需要显式声明覆盖父类的方法，确保多态行为的正确性。
 * 4. 枚举值范围：在处理用户输入的枚举值时，确保输入值在有效范围内。
 */

const int LIM = 4; // 定义数组大小常量

int main() {
    // 使用不同的构造函数创建对象
    Waiter bob("Bob", 314, 5); // 名字为 Bob，ID 为 314，风度评分为 5
    Singer bev("Bev", 522, 3); // 名字为 Bev，ID 为 522，声部为 contralto
    Waiter w_temp; // 默认构造，初始化为空
    Singer s_temp; // 默认构造，初始化为空

    // 创建指向 `Worker` 对象的指针数组
    Worker* pw[LIM] = {&bob, &bev, &w_temp, &s_temp};

    // 为数组中的部分元素调用 `set()` 方法输入数据
    for (int i = 2; i < LIM; ++i) {
        pw[i]->set(); // 通过多态性调用 `set` 方法，根据实际对象类型选择调用哪一个实现
    }

    // 展示所有元素的信息
    for (int i = 0; i < LIM; ++i) {
        pw[i]->show(); // 通过多态性调用 `show` 方法
        cout << endl;
    }

    return 0; // 返回 0 表示程序成功结束
}