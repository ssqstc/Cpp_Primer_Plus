#include <iostream>  // 标准输入输出流库

/*
  知识点总结：
  1. `cout` 用于标准输出：可以输出字符、整数、浮点数等各种类型的数据。
  2. 科学计数法：可以使用 `E` 或 `e` 表示指数部分，如 `1.67E2` 表示 167。
  3. `double` 类型：用于存储双精度浮点数，能够表示非常大或非常小的实数。
  4. `cout` 的默认格式化：整数直接输出，浮点数根据大小自动选择普通表示或科学计数法。

  注意点：
  1. 不同类型的数据（如字符、整数、浮点数）输出时格式可能不同，需要留意输出的格式化。
  2. 科学计数法的使用可能导致输出格式与预期不同，特别是在表示非常大的数或非常小的数时。
*/

using namespace std;

int main() {
    cout << "12345678901234567890\n";  // 输出标尺，用于观察输出对齐

    char ch = 'K';  // 定义字符变量 'K'
    int t = 273;    // 定义整数变量 273

    cout << ch << ":\n";  // 输出字符 'K'
    cout << t << ":\n";   // 输出整数 273
    cout << -t << ":\n";  // 输出整数 -273

    double f1 = 1.200;  // 定义双精度浮点数 1.200
    cout << f1 << ":\n";  // 输出 1.200
    cout << (f1 + 1.0 / 9.0) << ":\n";  // 计算并输出 1.200 + 1/9 的值

    double f2 = 1.67E2;  // 定义双精度浮点数 1.67E2，即 167
    cout << f2 << ":\n";  // 输出 167
    f2 += 1.0 / 9.0;  // f2 加上 1/9 的值
    cout << f2 << ":\n";  // 输出新的 f2 值
    cout << (f2 * 1.0e4) << ":\n";  // 输出 f2 乘以 10000 的值

    double f3 = 2.3e-4;  // 定义双精度浮点数 2.3e-4，即 0.00023
    cout << f3 << ":\n";  // 输出 0.00023
    cout << f3 / 10 << ":\n";  // 输出 f3 除以 10 的值

    return 0;
}